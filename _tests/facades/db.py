import subprocess

class DbFacade:

	def __init__(self, cqlshCommand):
		self.cqlshCommand = cqlshCommand

	def clear_tables(self):
		delete_from_tables_command = ("use biketimer; "
										"truncate users; "
										"truncate spots; "
										"truncate runs_by_user_segment_date; "
										"truncate runs_by_segment_date_time; "
										"truncate runs_by_user_spot_date; "
										"truncate runs_by_user_date; "
										"truncate runs_by_spot_user_date; "
										"truncate runs_by_segment_user_date; "
										"truncate runs_by_segment_time; ")
		p_echo_command = subprocess.Popen(['echo', delete_from_tables_command], stdout=subprocess.PIPE)
		p_cqlsh = subprocess.Popen(self.cqlshCommand, stdin=p_echo_command.stdout, stdout=subprocess.PIPE)
		out, err = p_cqlsh.communicate()
		print "Db command 'delete_from_tables_command' output: " + str(out)
		print "Db command 'delete_from_tables_command' error output: " + str(err)

	def add_spot(self):
		add_spot_command = ("use biketimer; "
							"INSERT INTO spots(id, name, position, tags, tracks_old, tracks_current) "
							"VALUES (00000000-0000-0000-0000-000000000001, 'Kouty nad Desnou', "
							"{ la: 50.1010566, lo: 17.1077972 }, ['Kouty', 'Loucna'], "
							"{ "
							"	{ "
							"		id: 00000000-0000-0000-0000-000000000001, "
							"		name: 'Chicken line', "
							"		segments_old: "
							"		{ "
							"			{ "
							"				id: 00000000-0000-0000-0000-000000000001, "
							"				name: 'First segment', "
							"				location_start: "
							"				{ "
							"					id: 00000000-0000-0000-0000-000000000001, "
							"					location: { la: 50.1010566, lo: 17.1077972 } "
							"				}, "
							"				location_stop: "
							"				{ "
							"					id: 00000000-0000-0000-0000-000000000002, "
							"					location: { la: 50.1010566, lo: 17.1077972 } "
							"				}, "
							"				valid_time_start: 1368438071000, "
							"				valid_time_stop: 1368438171000 "
							"			} "
							"		}, "
							"		segments_current: "
							"		[ "
							"			{ "
							"				id: 00000000-0000-0000-0000-000000000002, "
							"				name: 'Second segment', "
							"				location_start: "
							"				{ "
							"					id: 00000000-0000-0000-0000-000000000003, "
							"					location: { la: 50.1010566, lo: 17.1077972 } "
							"				}, "
							"				location_stop: "
							"				{ "
							"					id: 00000000-0000-0000-0000-000000000004, "
							"					location: { la: 50.1010566, lo: 17.1077972 } "
							"				}, "
							"				valid_time_start: 1368438071000, "
							"				valid_time_stop: 0 "
							"			} "
							"		], "
							"		valid_time_start: 1368438071000, "
							"		valid_time_stop: 1368438072000 "
							"	} "
							"}, "
							"{ "
							"	{ "
							"		id: 00000000-0000-0000-0000-000000000002, "
							"		name: 'Red track', "
							"		segments_old: {}, "
							"		segments_current: "
							"		[ "
							"			{ "
							"				id: 00000000-0000-0000-0000-000000000003, "
							"				name: 'Meadow', "
							"				location_start: "
							"				{ "
							"					id: 00000000-0000-0000-0000-000000000005, "
							"					location: { la: 50.1010566, lo: 17.1077972 } "
							"				}, "
							"				location_stop: "
							"				{ "
							"					id: 00000000-0000-0000-0000-000000000006, "
							"					location: { la: 50.1010566, lo: 17.1077972 } "
							"				}, "
							"				valid_time_start: 1368438071000, "
							"				valid_time_stop: 0 "
							"			}, "
							"			{ "
							"				id: 00000000-0000-0000-0000-000000000004, "
							"				name: 'Forest', "
							"				location_start: "
							"				{ "
							"					id: 00000000-0000-0000-0000-000000000007, "
							"					location: { la: 50.1010566, lo: 17.1077972 } "
							"				}, "
							"				location_stop: "
							"				{ "
							"					id: 00000000-0000-0000-0000-000000000008, "
							"					location: { la: 50.1010566, lo: 17.1077972 } "
							"				}, "
							"				valid_time_start: 1368438071000, "
							"				valid_time_stop: 0 "
							"			} "
							"		], "
							"		valid_time_start: 1368438071000, "
							"		valid_time_stop: 0 "
							"	} "
							"});")	
		p_echo_command = subprocess.Popen(['echo', add_spot_command], stdout=subprocess.PIPE)
		p_cqlsh = subprocess.Popen(self.cqlshCommand, stdin=p_echo_command.stdout, stdout=subprocess.PIPE)
		out, err = p_cqlsh.communicate()
		print "Db command 'add_spot_command' output: " + str(out)
		print "Db command 'add_spot_command' error output: " + str(err)
